"""
Employee module for Royal Stay Hotel Management System.
This module defines the Employee and Manager classes that inherit from Person.
"""

from datetime import datetime  # importing datetime to keep track of when employees join
from person import Person  # getting our Person class that we made before

class Employee(Person):
    """
    Class representing an employee in the hotel management system.
    
    Employee inherits from Person and adds attributes and methods specific to hotel staff.
    
    Attributes:
        _position (str): Job position/title of the employee
        _salary (float): Annual salary of the employee
        _joining_date (datetime): Date when the employee joined the hotel
    """
    
    def __init__(self, person_id, name, email, phone, position, salary):
        """
        Initialize a new Employee object.
        
        Args:
            person_id (int): Unique identifier for the employee
            name (str): Full name of the employee
            email (str): Email address of the employee
            phone (str): Phone number of the employee
            position (str): Job position/title
            salary (float): Annual salary
        """
        # Call the parent class constructor
        super().__init__(person_id, name, email, phone)  # calling Person's init to set up the basic stuff
        
        # Employee-specific attributes
        self._position = position  # what job they do at the hotel
        self._salary = salary  # how much they make per year
        self._joining_date = datetime.now()  # when they started working, just setting to now
    
    def assign_tasks(self, tasks):
        """
        Assign tasks to the employee.
        
        Args:
            tasks (list): List of task descriptions
            
        Returns:
            bool: True if tasks were assigned successfully
        """
        print(f"Tasks assigned to {self._name} ({self._position}):")  # prints who's getting the tasks
        for i, task in enumerate(tasks, 1):  # loops through the list with numbers starting at 1
            print(f"  {i}. {task}")  # prints each task with a number
        return True  # says it worked
    
    def process_request(self, request):
        """
        Process a guest request.
        
        Args:
            request (str): Description of the request
            
        Returns:
            bool: True if the request was processed successfully
        """
        print(f"{self._name} ({self._position}) is processing request: {request}")  # shows who's handling what request
        print("Request processed successfully.")  # says it's done
        return True  # everything went ok
    
    def __str__(self):
        """
        Return a string representation of the Employee object.
        
        Returns:
            str: A string containing the employee details
        """
        # Get base information from parent class
        base_info = super().__str__()  # gets the basic info from Person class
        
        # Add employee-specific details
        return (f"{base_info}\n"  # starts with the Person info
                f"Position: {self._position}\n"  # adds their job title
                f"Salary: ${self._salary:.2f}\n"  # shows how much they make with 2 decimal places
                f"Joined: {self._joining_date.strftime('%Y-%m-%d')}")  # shows when they started working


class Manager(Employee):
    """
    Class representing a manager in the hotel management system.
    
    Manager inherits from Employee and adds attributes and methods specific to management staff.
    
    Attributes:
        _department (str): Department managed by the manager
        _subordinates (list): List of employees supervised by the manager
    """
    
    def __init__(self, person_id, name, email, phone, salary, department):
        """
        Initialize a new Manager object.
        
        Args:
            person_id (int): Unique identifier for the manager
            name (str): Full name of the manager
            email (str): Email address of the manager
            phone (str): Phone number of the manager
            salary (float): Annual salary
            department (str): Department managed
        """
        # Call the parent class constructor with position="Manager"
        super().__init__(person_id, name, email, phone, f"{department} Manager", salary)  # calls Employee init with position as "[department] Manager"
        
        # Manager-specific attributes
        self._department = department  # which department they're in charge of
        self._subordinates = []  # empty list for people who work under them
    
    def add_subordinate(self, employee):
        """
        Add an employee to the manager's team.
        
        Args:
            employee (Employee): Employee to add as subordinate
            
        Returns:
            bool: True if the employee was added successfully
        """
        if employee not in self._subordinates:  # check if they're already on the team
            self._subordinates.append(employee)  # add them to the team list
            print(f"{employee.get_name()} added to {self._name}'s team in {self._department} department")  # success message
            return True  # it worked
        else:
            print(f"{employee.get_name()} is already in {self._name}'s team")  # they're already there
            return False  # didn't add them because they're already there
    
    def remove_subordinate(self, employee):
        """
        Remove an employee from the manager's team.
        
        Args:
            employee (Employee): Employee to remove from subordinates
            
        Returns:
            bool: True if the employee was removed successfully
        """
        if employee in self._subordinates:  # check if they're actually on the team
            self._subordinates.remove(employee)  # take them off the team list
            print(f"{employee.get_name()} removed from {self._name}'s team")  # tell user it worked
            return True  # success
        else:
            print(f"{employee.get_name()} is not in {self._name}'s team")  # they weren't even on the team
            return False  # couldn't remove them
    
    def approve_budget(self, amount, purpose):
        """
        Approve a budget request.
        
        Args:
            amount (float): Amount of budget requested
            purpose (str): Purpose of the budget
            
        Returns:
            bool: True if the budget was approved
        """
        print(f"Budget Request: ${amount:.2f} for {purpose}")  # shows the budget request details
        print(f"Approved by: {self._name}, {self._department} Manager")  # who approved it
        return True  # managers always say yes I guess lol
    
    def evaluate_staff(self, employee, rating, comments):
        """
        Evaluate the performance of a staff member.
        
        Args:
            employee (Employee): Employee to evaluate
            rating (int): Performance rating (1-5)
            comments (str): Evaluation comments
            
        Returns:
            bool: True if the evaluation was completed successfully
        """
        print(f"Performance Evaluation for {employee.get_name()}:")  # header for the evaluation
        print(f"Rating: {rating}/5")  # their score out of 5
        print(f"Comments: {comments}")  # feedback about their work
        print(f"Evaluated by: {self._name}, {self._department} Manager")  # who did the evaluation
        return True  # completed successfully
    
    def __str__(self):
        """
        Return a string representation of the Manager object.
        
        Returns:
            str: A string containing the manager details
        """
        # Get base information from parent class
        base_info = super().__str__()  # get all the Employee info first
        
        # Add manager-specific details
        return (f"{base_info}\n"  # start with Employee info
                f"Department: {self._department}\n"  # which department they manage
                f"Team Size: {len(self._subordinates)} employee(s)")  # how many people work for them
