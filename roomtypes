"""
Room Types module for Royal Stay Hotel Management System.
This module defines the different types of rooms available in the hotel.
"""

from room import Room  # import the Room class that we made before

class SingleRoom(Room):
    """
    Class representing a single room in the hotel.
    
    SingleRoom is a type of Room designed for one person, with specific attributes and methods.
    
    Attributes:
        _is_single_bed (bool): Whether the room has a single bed
        _max_occupancy (int): Maximum number of occupants allowed
        _has_work_desk (bool): Whether the room has a work desk
    """
    
    def __init__(self, room_number, amenities, price_per_night, is_single_bed=True, max_occupancy=1, has_work_desk=False):
        """
        Initialize a new SingleRoom object.
        
        Args:
            room_number (int): Unique identifier for the room
            amenities (list): List of amenities available in the room
            price_per_night (float): Cost per night for the room
            is_single_bed (bool, optional): Whether the room has a single bed. Defaults to True.
            max_occupancy (int, optional): Maximum number of occupants allowed. Defaults to 1.
            has_work_desk (bool, optional): Whether the room has a work desk. Defaults to False.
        """
        # Call the parent class constructor with room_type="Single"
        super().__init__(room_number, "Single", amenities, price_per_night)  # this calls the Room class's __init__ method which is pretty cool
        
        # SingleRoom specific attributes
        self._is_single_bed = is_single_bed  # most singles have a single bed but I guess some don't
        self._max_occupancy = max_occupancy  # usually just 1 person allowed
        self._has_work_desk = has_work_desk  # some rooms have desks for working
    
    def set_up_for_business(self):
        """
        Set up the room for business travelers.
        
        This method ensures the room has a work desk and adds business-friendly amenities.
        
        Returns:
            bool: True if the setup was successful
        """
        if not self._has_work_desk:  # check if there's no desk yet
            self._has_work_desk = True  # add a desk to the room
            print(f"Work desk added to Room {self._room_number}")  # tell the user we added a desk
        
        # Add business amenities if not already present
        business_amenities = ["High-speed Wi-Fi", "Desk Lamp", "Power Outlets"]  # list of stuff business people need
        for amenity in business_amenities:  # loop through each amenity
            self.add_amenity(amenity)  # add it to the room using the parent class method
        
        print(f"Room {self._room_number} is now set up for business")  # tell the user it worked
        return True  # everything went ok
    
    def __str__(self):
        """
        Return a string representation of the SingleRoom object.
        
        Returns:
            str: A string containing the single room details
        """
        base_info = super().__str__()  # get the string from the parent Room class
        bed_type = "Single bed" if self._is_single_bed else "Double bed"  # figure out what kind of bed
        work_desk = "Has work desk" if self._has_work_desk else "No work desk"  # do we have a desk?
        
        return (f"{base_info}\n"  # start with the basic Room info
                f"Type: Single Room\n"  # specify it's a single room
                f"Bed: {bed_type}\n"  # what kind of bed it has
                f"Max Occupancy: {self._max_occupancy} person(s)\n"  # how many people can stay
                f"Work Space: {work_desk}")  # whether it has a desk or not


class DoubleRoom(Room):
    """
    Class representing a double room in the hotel.
    
    DoubleRoom is a type of Room designed for two or more people, with specific attributes and methods.
    
    Attributes:
        _number_of_beds (int): Number of beds in the room
        _has_balcony (bool): Whether the room has a balcony
        _is_connected (bool): Whether the room is connected to another room
    """
    
    def __init__(self, room_number, amenities, price_per_night, number_of_beds=2, has_balcony=False, is_connected=False):
        """
        Initialize a new DoubleRoom object.
        
        Args:
            room_number (int): Unique identifier for the room
            amenities (list): List of amenities available in the room
            price_per_night (float): Cost per night for the room
            number_of_beds (int, optional): Number of beds in the room. Defaults to 2.
            has_balcony (bool, optional): Whether the room has a balcony. Defaults to False.
            is_connected (bool, optional): Whether the room is connected to another room. Defaults to False.
        """
        # Call the parent class constructor with room_type="Double"
        super().__init__(room_number, "Double", amenities, price_per_night)  # calling the parent constructor like before
        
        # DoubleRoom specific attributes
        self._number_of_beds = number_of_beds  # could be 2 twins or 1 king or whatever
        self._has_balcony = has_balcony  # fancy rooms might have a balcony
        self._is_connected = is_connected  # some rooms connect to others for families
    
    def separate_beds(self):
        """
        Separate the beds in the room (if applicable).
        
        Returns:
            bool: True if the beds were separated successfully, False otherwise
        """
        if self._number_of_beds >= 2:  # check if there are at least 2 beds to separate
            print(f"Beds in Room {self._room_number} have been separated")  # tell the user we did it
            return True  # it worked
        else:
            print(f"Cannot separate beds in Room {self._room_number} - only one bed available")  # explain why it didn't work
            return False  # it failed
    
    def __str__(self):
        """
        Return a string representation of the DoubleRoom object.
        
        Returns:
            str: A string containing the double room details
        """
        base_info = super().__str__()  # get string from parent class again
        balcony = "Has balcony" if self._has_balcony else "No balcony"  # check for balcony
        connected = "Connected room" if self._is_connected else "Not connected"  # is it connected to another room?
        
        return (f"{base_info}\n"  # basic room info first 
                f"Type: Double Room\n"  # specify it's a double room
                f"Number of Beds: {self._number_of_beds}\n"  # how many beds
                f"Features: {balcony}, {connected}")  # extra features


class SuiteRoom(Room):
    """
    Class representing a suite room in the hotel.
    
    SuiteRoom is a premium type of Room with multiple rooms and special amenities.
    
    Attributes:
        _number_of_rooms (int): Number of separate rooms in the suite
        _has_kitchen (bool): Whether the suite has a kitchen
        _has_jacuzzi (bool): Whether the suite has a jacuzzi
    """
    
    def __init__(self, room_number, amenities, price_per_night, number_of_rooms=2, has_kitchen=False, has_jacuzzi=False):
        """
        Initialize a new SuiteRoom object.
        
        Args:
            room_number (int): Unique identifier for the room
            amenities (list): List of amenities available in the room
            price_per_night (float): Cost per night for the room
            number_of_rooms (int, optional): Number of separate rooms in the suite. Defaults to 2.
            has_kitchen (bool, optional): Whether the suite has a kitchen. Defaults to False.
            has_jacuzzi (bool, optional): Whether the suite has a jacuzzi. Defaults to False.
        """
        # Call the parent class constructor with room_type="Suite"
        super().__init__(room_number, "Suite", amenities, price_per_night)  # parent constructor again but for Suite
        
        # SuiteRoom specific attributes
        self._number_of_rooms = number_of_rooms  # how many separate rooms in the suite - like bedroom + living room
        self._has_kitchen = has_kitchen  # some fancy suites have kitchens
        self._has_jacuzzi = has_jacuzzi  # super fancy ones have jacuzzis which sounds awesome
    
    def arrange_special_service(self):
        """
        Arrange special services for the suite.
        
        Returns:
            bool: True if special services were arranged successfully
        """
        print(f"Special services arranged for Suite {self._room_number}:")  # heading for the services
        print("  - Daily housekeeping")  # they clean your room every day
        print("  - Welcome champagne")  # free champagne when you arrive!
        print("  - Fresh flowers")  # flowers in the room
        print("  - Concierge service")  # someone to help you with whatever you need
        return True  # always works I guess
    
    def __str__(self):
        """
        Return a string representation of the SuiteRoom object.
        
        Returns:
            str: A string containing the suite room details
        """
        base_info = super().__str__()  # get parent class info
        kitchen = "Has kitchen" if self._has_kitchen else "No kitchen"  # check for kitchen
        jacuzzi = "Has jacuzzi" if self._has_jacuzzi else "No jacuzzi"  # check for jacuzzi
        
        return (f"{base_info}\n"  # basic room info
                f"Type: Suite\n"  # it's a suite
                f"Number of Rooms: {self._number_of_rooms}\n"  # how many rooms in the suite
                f"Premium Features: {kitchen}, {jacuzzi}")  # the fancy stuff it has
        
        return (f"{base_info}\n"
                f"Type: Suite\n"
                f"Number of Rooms: {self._number_of_rooms}\n"
                f"Premium Features: {kitchen}, {jacuzzi}")
