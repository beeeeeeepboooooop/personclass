"""
Room module for Royal Stay Hotel Management System.
This module defines the Room class, which serves as the parent class for different room types.
"""

class Room:
    """
    Base class representing a room in the hotel.
    
    This class serves as a parent class for different types of rooms (SingleRoom, 
    DoubleRoom, SuiteRoom), containing common attributes and methods.
    
    Attributes:
        _room_number (int): Unique identifier for the room
        _room_type (str): Type of room (e.g., "Single", "Double", "Suite")
        _amenities (list): List of amenities available in the room
        _price_per_night (float): Cost per night for the room
        _is_available (bool): Current availability status of the room
    """
    
    def __init__(self, room_number, room_type, amenities, price_per_night):
        """
        Initialize a new Room object.
        
        Args:
            room_number (int): Unique identifier for the room
            room_type (str): Type of room
            amenities (list): List of amenities available in the room
            price_per_night (float): Cost per night for the room
        """
        # Protected attributes (accessible to child classes)
        self._room_number = room_number
        self._room_type = room_type
        self._amenities = amenities if amenities else []
        self._price_per_night = price_per_night
        self._is_available = True  # New rooms are available by default
    
    def update_status(self, is_available):
        """
        Update the availability status of the room.
        
        Args:
            is_available (bool): New availability status
            
        Returns:
            bool: True if the update was successful
        """
        self._is_available = is_available
        status = "available" if is_available else "unavailable"
        print(f"Room {self._room_number} is now {status}")
        return True
    
    def update_price(self, price):
        """
        Update the price per night for the room.
        
        Args:
            price (float): New price per night
            
        Returns:
            bool: True if the update was successful
        """
        self._price_per_night = price
        print(f"Price for Room {self._room_number} updated to ${price:.2f} per night")
        return True
    
    def add_amenity(self, amenity):
        """
        Add a new amenity to the room.
        
        Args:
            amenity (str): Amenity to add
            
        Returns:
            bool: True if the amenity was added successfully
        """
        if amenity not in self._amenities:
            self._amenities.append(amenity)
            print(f"'{amenity}' added to Room {self._room_number}")
            return True
        else:
            print(f"'{amenity}' already exists in Room {self._room_number}")
            return False
    
    def remove_amenity(self, amenity):
        """
        Remove an amenity from the room.
        
        Args:
            amenity (str): Amenity to remove
            
        Returns:
            bool: True if the amenity was removed successfully
        """
        if amenity in self._amenities:
            self._amenities.remove(amenity)
            print(f"'{amenity}' removed from Room {self._room_number}")
            return True
        else:
            print(f"'{amenity}' not found in Room {self._room_number}")
            return False
    
    def __str__(self):
        """
        Return a string representation of the Room object.
        
        Returns:
            str: A string containing the room details
        """
        status = "Available" if self._is_available else "Unavailable"
        amenities_str = ", ".join(self._amenities) if self._amenities else "None"
        
        return (f"Room {self._room_number} ({self._room_type}) - {status}\n"
                f"Price: ${self._price_per_night:.2f} per night\n"
                f"Amenities: {amenities_str}")
