"""
Booking module for Royal Stay Hotel Management System.
This module defines the Booking class which represents room reservations.
"""

from datetime import datetime  # importing the datetime module to handle dates

class Booking:
    """
    Class representing a room booking in the hotel management system.
    
    Attributes:
        _booking_id (int): Unique identifier for the booking
        _guest: Guest who made the booking
        _room: Room that is booked
        _check_in_date (datetime): Date of check-in
        _check_out_date (datetime): Date of check-out
        _total_price (float): Total price for the stay
        _status (str): Current status of the booking (Confirmed, Cancelled, Completed)
        _services (list): List of services requested as part of the booking
    """
    
    def __init__(self, booking_id, guest, room, check_in_date, check_out_date):
        """
        Initialize a new Booking object.
        
        Args:
            booking_id (int): Unique identifier for the booking
            guest: Guest who is making the booking
            room: Room to be booked
            check_in_date (datetime): Date of check-in
            check_out_date (datetime): Date of check-out
        """
        self._booking_id = booking_id  # store the booking ID - pretty straightforward
        self._guest = guest  # save who's staying with us
        self._room = room  # which room they're staying in
        self._check_in_date = check_in_date  # when they arrive
        self._check_out_date = check_out_date  # when they leave
        self._total_price = self.calculate_total_price()  # figure out how much they need to pay
        self._status = "Confirmed"  # when we make a new booking it's automatically confirmed
        self._services = []  # start with empty list of services, they can add stuff later
        
        # Mark the room as taken so nobody else can book it
        self._room.update_status(False)  # false means not available, kinda confusing tbh
        
        # Keep track of this booking in the guest's history
        self._guest.add_booking(self)  # adds this booking to their record
    
    @property
    def booking_id(self):
        """Get the booking ID."""
        return self._booking_id  # property so we can access it but not change it
    
    @property
    def guest(self):
        """Get the guest associated with the booking."""
        return self._guest  # lets us see who made the booking
    
    @property
    def room(self):
        """Get the room associated with the booking."""
        return self._room  # access the room object
    
    @property
    def check_in_date(self):
        """Get the check-in date."""
        return self._check_in_date  # when they're supposed to arrive
    
    @property
    def check_out_date(self):
        """Get the check-out date."""
        return self._check_out_date  # when they're supposed to leave
    
    @property
    def total_price(self):
        """Get the total price of the booking."""
        return self._total_price  # how much they're paying in total
    
    @property
    def status(self):
        """Get the booking status."""
        return self._status  # whether it's confirmed, cancelled or completed
    
    @property
    def services(self):
        """Get the services requested."""
        return self._services  # extras they've added to their stay
    
    def calculate_total_price(self):
        """
        Calculate the total price for the stay.
        
        This takes into account the room price, duration of stay, and any additional services.
        
        Returns:
            float: The total price
        """
        # Figure out how many nights they're staying
        delta = self._check_out_date - self._check_in_date  # this gives a timedelta object
        nights = delta.days  # extract just the days part
        
        # Basic math: nights Ã— price per night = base price
        base_price = self._room._price_per_night * nights  # probably should use a getter method here but oh well
        
        # Add up all the service costs if they have any
        service_cost = sum(service._price for service in self._services) if self._services else 0  # list comprehension is cool but confusing sometimes
        
        return base_price + service_cost  # add it all up and return
    
    def cancel(self):
        """
        Cancel the booking.
        
        Returns:
            bool: True if the booking was cancelled successfully
        """
        if self._status == "Confirmed":  # can only cancel if it's currently confirmed
            self._status = "Cancelled"  # change the status
            # Make the room available again
            self._room.update_status(True)  # true means available
            print(f"Booking {self._booking_id} has been cancelled")  # let the user know
            return True  # it worked!
        else:
            print(f"Cannot cancel booking with status: {self._status}")  # explain the problem
            return False  # it didn't work
    
    def complete(self):
        """
        Mark the booking as completed.
        
        Returns:
            bool: True if the booking was completed successfully
        """
        if self._status == "Confirmed":  # can only complete if it's currently confirmed
            self._status = "Completed"  # change status to completed
            # Make the room available again
            self._room.update_status(True)  # free up the room
            print(f"Booking {self._booking_id} has been completed")  # confirmation message
            
            # Give the guest some loyalty points based on how much they spent
            points_earned = int(self._total_price)  # 1 point per dollar, rounded down
            self._guest.earn_points(points_earned)  # add the points to their account
            
            return True  # success!
        else:
            print(f"Cannot complete booking with status: {self._status}")  # tell them why it failed
            return False  # operation failed
    
    def send_confirmation(self):
        """
        Send a booking confirmation to the guest.
        
        Returns:
            bool: True if the confirmation was sent successfully
        """
        # This is just printing stuff but in a real system it would send an email
        print("\n---------- BOOKING CONFIRMATION ----------")  # start of the confirmation message
        print(f"Dear {self._guest.get_name()},")  # personalized greeting
        print(f"Your booking at Royal Stay Hotel has been confirmed.")  # let them know it worked
        print(f"Booking ID: {self._booking_id}")  # booking reference number
        print(f"Room: {self._room._room_number} ({self._room._room_type})")  # which room they got
        print(f"Check-in: {self._check_in_date.strftime('%Y-%m-%d')}")  # arrival date formatted nicely
        print(f"Check-out: {self._check_out_date.strftime('%Y-%m-%d')}")  # departure date formatted nicely
        print(f"Total Price: ${self._total_price:.2f}")  # how much they're paying with 2 decimal places
        print("Thank you for choosing Royal Stay Hotel!")  # polite ending
        print("----------------------------------------\n")  # end of the message
        return True  # assume it worked
    
    def add_service(self, service):
        """
        Add a service to the booking.
        
        Args:
            service: Service object to add
            
        Returns:
            bool: True if the service was added successfully
        """
        self._services.append(service)  # add the new service to our list
        # Need to update the price since we added something
        self._total_price = self.calculate_total_price()  # recalculate total with the new service
        print(f"Service '{service._service_type}' added to Booking {self._booking_id}")  # confirmation message
        return True  # it worked
    
    def __str__(self):
        """
        Return a string representation of the Booking object.
        
        Returns:
            str: A string containing the booking details
        """
        # If they have services, list them all separated by commas, otherwise just say "None"
        service_str = ", ".join(s._service_type for s in self._services) if self._services else "None"  # another tricky list comprehension
        
        # Build a multi-line string with all the booking info
        return (f"Booking ID: {self._booking_id} - {self._status}\n"  # id and current status
                f"Guest: {self._guest.get_name()}\n"  # who's staying
                f"Room: {self._room._room_number} ({self._room._room_type})\n"  # which room
                f"Check-in: {self._check_in_date.strftime('%Y-%m-%d')}\n"  # when they arrive
                f"Check-out: {self._check_out_date.strftime('%Y-%m-%d')}\n"  # when they leave
                f"Services: {service_str}\n"  # any extra services they asked for
                f"Total Price: ${self._total_price:.2f}")  # how much it costs
